// You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
// Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.
// Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.
// Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
// Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

// Example 1:

// Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
// Output: 0
// Example 2:

// Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
// Output: 0
// Example 3:

// Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
// Output: 1

// // GOAL: we just need to find the first node (in sorted initial array), that is the only(no other malware nodes in this group) infected node in the group, and the group has the maximum number of nodes.
//Because if we remove the one that got infected => we will save more nodes in that group

//If there are  more than 1 effected node in a group, then there's no reason to delete one of them, because otheres will be effected again anyway
//Time O(n^2); Space O(n)
const minMalwareSpread = (graph, initial) => {
    initial.sort((a, b) => a - b);
    let infectedNodes = new Set(initial); //saving all the nodes that are infected;
    let max = 0;
  
    let result = initial[0];
  
    for (let node of initial) {
      let visited = new Set();
      let containsOtherInfectedNodes = [false]; //use an array to contain the flag - whether the group has another malware nodes
      //call DFS to find how many nodes are there in the current group
      let count = DFS(
        node,
        node,
        graph,
        visited,
        containsOtherInfectedNodes,
        infectedNodes
      );
  
      //if current group has another malware, which means if we delete current node, still another malware will affect the whole group
      if (containsOtherInfectedNodes[0]) continue;
      if (count > max) {
        console.log("inside if", node);
        max = count;
        result = node;
      }
    }
    return result;
  };
  
  function DFS(
    node,
    initialNode,
    graph,
    visited,
    containsOtherInfectedNodes,
    infectedNodes
  ) {
    //base case
    if (visited.has(node) || containsOtherInfectedNodes[0] === true) return 0;
  
    visited.add(node);
    let numberOfNodes = 1;
  
    let edges = graph[node];
    for (let i = 0; i < edges.length; i++) {
      if (graph[node][i] === 1) {
        //if we found another malware that is different from the initialStart, we set the flag to true and there is no need to continue the search.
        if (i !== initialNode && infectedNodes.has(i)) {
          containsOtherInfectedNodes[0] = true;
          break;
        }
        numberOfNodes += DFS(
          i,
          initialNode,
          graph,
          visited,
          containsOtherInfectedNodes,
          infectedNodes
        );
      }
    }
    return numberOfNodes;
  }
  